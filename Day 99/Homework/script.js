// მარტივი მისალმების ფუნქცია
// შექმენით arrow function, რომელიც იღებს ერთი პარამეტრს (სახელი) და აბრუნებს „გამარჯობა, [სახელი]!“. თუ პარამეტრი არ არის მოცემული, გამოიყენეთ "მაყურებელი" როგორც დეფოლტი.

const hello = name => { console.log(`Hello, ${name}`) }

hello("Nika")

// ორი რიცხვის ჯამი
// შექმენით arrow function, რომელიც იღებს ორი პარამეტრს (a, b) და აბრუნებს მათ ჯამს. თუ პარამეტრები არ არის მოცემული, გამოიყენეთ 0 და 5 როგორც დეფოლტი მნიშვნელობები.

const sum = (a = 0, b = 5) => { return a + b }

console.log(sum())


// მაქსიმალური რიცხვი
// შექმენით arrow function, რომელიც იღებს ორი რიცხვს და აბრუნებს მეტს მათ შორის. თუ პარამეტრები არ არის მოცემული, გამოიყენეთ 10 და 20 როგორც დეფოლტი მნიშვნელობები.

const more = (a = 10, b = 20) => {
    if (a > b) {
        return a
    } else {
        return b
    }
}

console.log(more())

// სამი რიცხვის გამრავლება
// შექმენით arrow function, რომელიც იღებს სამი პარამეტრს და აბრუნებს მათ გამრავლებას. თუ პარამეტრები არ არის მოცემული, გამოიყენეთ 1, 2 და 3 როგორც დეფოლტი მნიშვნელობები.

const gamravleba = (a = 1, b = 2) => { return a * b }

console.log(gamravleba())

// ფარმაცევტული ფასის გამოთვლა
// შექმენით arrow function, რომელიც იღებს ორ პარამეტრს (ფასს და გადასახადს) და აბრუნებს საბოლოო ფასს (ფასი + გადასახადი). თუ გადასახადი არ არის მოცემული, გამოიყენეთ 5% როგორც დეფოლტი.

const gadasaxadi = (price, gadasaxadi = (price / 100) * 5) => { return price + gadasaxadi }

console.log(gadasaxadi(1))

// დაბოლოების სიმრავლე
// შექმენით arrow function, რომელიც იღებს ტექსტს და რიცხვს და აბრუნებს ტექსტის გამეორებას მოცემული რიცხვის რაოდენობის მიხედვით. თუ რიცხვი არ არის მოცემული, გამოიყენეთ 3 როგორც დეფოლტი.

const gameoreba = (text, gameoreba = 3) => {
    for (let i = 0; i < gameoreba; i++) {
        console.log(text)
    }
}
gameoreba("Hello")

// რიცხვების ამოწმება
// შექმენით arrow function, რომელიც იღებს ორი რიცხვს და აბრუნებს true თუ პირველი რიცხვი მეტია მეორეზე. თუ არ არის პარამეტრები, გამოიყენეთ 5 და 10 როგორც დეფოლტი.

const more2 = (a = 5, b = 10) => { return a > b }

console.log(more2())

// პირადი ჩამონათვალი
// შექმენით arrow function, რომელიც იღებს ობიექტს, რომელშიც არის სახელი, ასაკი და ქალაქი. თუ რომელიმე პარამეტრი არ არის მოცემული, გამოიყენეთ მაია, 25 და თბილისი როგორც დეფოლტი მნიშვნელობები. ფუნქცია უნდა დააბრუნოს სტრინგი, რომელიც შეიცავს შემდეგ შინაარსს: "გამარჯობა, მე ვარ [სახელი], [ასაკი] წლის და მცხოვრები ვარ [ქალაქი]-ში."

const obj = (object = { name: "მაია", age: 25, city: "თბილისი" }) => { return `გამარჯობა, მე ვარ ${object.name}, ${object.age} წლის და მცხოვრები ვარ ${object.city}-ში` }

console.log(obj())

// რიცხვების სერია
// შექმენით arrow function, რომელიც იღებს დასაწყისის რიცხვს, ბოლოს რიცხვს და ნაბიჯის ზომას. ფუნქცია უნდა დააბრუნოს ყველა რიცხვი იმ ინტერვალებში, მიცემული ნაბიჯის ზომით. თუ რომელიმე პარამეტრი არ არის მოცემული, გამოიყენეთ 1, 10 და 1 როგორც დეფოლტი.

const nums = (start = 1, end = 10, step = 1) => {
    for (let i = start; i < end; i += step) {
        console.log(i)
    }
}

nums(5, 54, 6)

// ობიექტის მნიშვნელობების გაერთიანება
// შექმენით arrow function, რომელიც იღებს ობიექტებს (ორ ან მეტს) და აბრუნებს მათ გაერთიანებულ მნიშვნელობებს (რაც იმას ნიშნავს, რომ ყველა ობიექტის ყველა მახასიათებელი გაერთიანდება ერთ ობიექტში). თუ არ არის ობიექტი გადმოცემული, გამოიყენეთ ცარიელი ობიექტი {} როგორც დეფოლტი.

const objs = (obj1 = {}, obj2 = {}) => {
    object = {}
    for (let i in obj1) {
        object[i] = obj1[i]
    }
    for (let i in obj2) {
        object[i] = obj2[i]
    }
    console.log(object)
}

objs({name: "Alice", age: 30, job: "Engineer"}, {make: "Tesla", model: "Model S", year: 2021, specs: { color: "Red", range: "370 miles", autopilot: true}})